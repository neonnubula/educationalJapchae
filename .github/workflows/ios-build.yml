name: iOS Release Build

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths: [ 'lib/**', 'ios/**', 'pubspec.*', '.github/workflows/ios-build.yml' ]

jobs:
  build-ios:
    runs-on: macos-14
    env:
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Install Flutter dependencies
        run: flutter pub get

      # Clean any cached iOS build data that might have old bundle ID
      - name: Clean iOS build cache
        run: |
          rm -rf ios/build
          rm -rf ios/.symlinks
          rm -rf ios/Flutter/Generated.xcconfig
          flutter clean
          flutter pub get
          flutter build ios --release --no-codesign

      # Extra clean for CocoaPods and Xcode Derived Data
      - name: Clean CocoaPods and Xcode Derived Data
        run: |
          cd ios
          rm -rf Pods
          rm -rf Podfile.lock
          pod cache clean --all
          pod install
          cd ..
          rm -rf ~/Library/Developer/Xcode/DerivedData/*

      # Import signing certificate & provisioning profile (requires secrets)
      - name: Import code signing certs & profiles
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          p12-password: ${{ secrets.APPLE_CERT_PASSWORD }}

      # Install provisioning profile
      - name: Install provisioning profile
        env:
          PROVISION_PROFILE: ${{ secrets.APPLE_PROVISIONING_PROFILE }}
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$PROVISION_PROFILE" | base64 --decode > "~/Library/MobileDevice/Provisioning Profiles/profile.mobileprovision"

      # Extract profile UUID so xcodebuild can use it for manual signing
      - name: Export profile UUID
        run: |
          PROFILE_PATH="$HOME/Library/MobileDevice/Provisioning Profiles/profile.mobileprovision"
          PROFILE_UUID=$(security cms -D -i "$PROFILE_PATH" | /usr/libexec/PlistBuddy -c "Print:UUID" /dev/stdin)
          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV

      # Write App Store Connect key (still needed later for fastlane deliver)
      - name: Write ASC API key to disk
        env:
          ASC_API_KEY_P8: ${{ secrets.ASC_API_KEY_P8 }}
        run: |
          KEY_PATH="$RUNNER_TEMP/asc_key.p8"
          echo "$ASC_API_KEY_P8" > "$KEY_PATH"
          echo "ASC_KEY_PATH=$KEY_PATH" >> $GITHUB_ENV
          echo "ASC_KEY_ID=$ASC_KEY_ID" >> $GITHUB_ENV
          echo "ASC_ISSUER_ID=$ASC_ISSUER_ID" >> $GITHUB_ENV

      # Build and export IPA via xcodebuild
      - name: Archive with xcodebuild (manual signing)
        run: |
          xcodebuild \
            -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath build/Runner.xcarchive \
            DEVELOPMENT_TEAM=$APPLE_TEAM_ID \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER=$PROFILE_UUID \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            clean archive

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportOptionsPlist ios/Flutter/ExportOptions.plist \
            -exportPath build/export \
            -allowProvisioningUpdates \
            -authenticationKeyID $ASC_KEY_ID \
            -authenticationKeyIssuerID $ASC_ISSUER_ID \
            -authenticationKeyPath $ASC_KEY_PATH

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: japchae-ios-ipa
          path: build/export/*.ipa

      # ---- Fastlane: upload to TestFlight ----
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'

      - name: Install fastlane
        run: gem install fastlane -N

      - name: Upload to TestFlight via fastlane
        env:
          ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
          ASC_API_KEY_P8: ${{ secrets.ASC_API_KEY_P8 }}
        run: |
          cd ios && fastlane ios upload_testflight 