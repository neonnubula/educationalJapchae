name: iOS Release Build

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths: [ 'lib/**', 'ios/**', 'pubspec.*', '.github/workflows/ios-build.yml' ]

jobs:
  build-ios:
    runs-on: macos-14
    env:
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Ensure Xcode 16 (with iOS 18 SDK) is selected for the build
      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16'

      - name: Load provisioning profile from repo
        shell: bash
        run: echo "APPLE_PROVISIONING_PROFILE=$(cat japchae.mobileprovision.b64.txt)" >> $GITHUB_ENV

      # Extract version and build number from pubspec.yaml for Info.plist substitution
      - name: Export Flutter version variables
        shell: bash
        run: |
          VERSION_LINE=$(grep '^version:' pubspec.yaml)
          VERSION=${VERSION_LINE#version: }
          BUILD_NAME=${VERSION%%+*}
          BUILD_NUMBER=${VERSION##*+}
          echo "FLUTTER_BUILD_NAME=$BUILD_NAME" >> $GITHUB_ENV
          echo "FLUTTER_BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "Using FLUTTER_BUILD_NAME=$BUILD_NAME, FLUTTER_BUILD_NUMBER=$BUILD_NUMBER"

      # Fail fast if any required secret is missing or empty
      - name: Verify required secrets
        shell: bash
        run: |
          for var in APPLE_TEAM_ID APPLE_CERTIFICATE_P12 APPLE_CERT_PASSWORD \
              ASC_API_KEY_P8 ASC_KEY_ID ASC_ISSUER_ID; do
            if [ -z "${!var}" ]; then
              echo "::error::${var} is not set or empty"
              exit 1
            fi
          done
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_CERTIFICATE_P12: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
          ASC_API_KEY_P8: ${{ secrets.ASC_API_KEY_P8 }}
          ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}

      - name: Debug Secret Availability
        run: |
          echo "Raw secret length: ${#APPLE_PROVISIONING_PROFILE}"
          if [ -z "$APPLE_PROVISIONING_PROFILE" ]; then
            echo "Secret is empty!"
          else
            echo "Secret is set (length: ${#APPLE_PROVISIONING_PROFILE})"
          fi

      - name: Debug Decoded Profile
        run: |
          echo "$APPLE_PROVISIONING_PROFILE" | base64 -d > profile.mobileprovision
          if [ -s profile.mobileprovision ]; then
            echo "Decoded file size: $(stat -f%z profile.mobileprovision)"
          else
            echo "Decoded file is empty or missing!"
          fi

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Install Flutter dependencies
        run: flutter pub get

      # Clean any cached iOS build data that might have old bundle ID
      - name: Clean iOS build cache
        run: |
          rm -rf ios/build
          rm -rf ios/.symlinks
          rm -rf ios/Flutter/Generated.xcconfig
          flutter clean
          flutter pub get
          flutter build ios --release --no-codesign --build-name $FLUTTER_BUILD_NAME --build-number $FLUTTER_BUILD_NUMBER

      # Extra clean for CocoaPods and Xcode Derived Data
      - name: Clean CocoaPods and Xcode Derived Data
        run: |
          cd ios
          rm -rf Pods
          rm -rf Podfile.lock
          pod cache clean --all
          pod install
          cd ..
          rm -rf ~/Library/Developer/Xcode/DerivedData/*

      # Import signing certificate & provisioning profile (requires secrets)
      - name: Import code signing certs & profiles
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          p12-password: ${{ secrets.APPLE_CERT_PASSWORD }}

      # Install provisioning profile
      - name: Install provisioning profile
        run: |
          # ---- DEBUG: Check secret content ----
          echo "PROVISION_PROFILE length: ${#APPLE_PROVISIONING_PROFILE}"
          echo "First 50 chars: ${APPLE_PROVISIONING_PROFILE:0:50}"
          if [ ${#APPLE_PROVISIONING_PROFILE} -eq 0 ]; then
            echo "::error::APPLE_PROVISIONING_PROFILE is completely empty! Check that japchae.mobileprovision.b64.txt exists and contains valid base64 content"
            exit 1
          fi
          
          # ---- ACTUAL WORK ----
          PROFILE_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          # Ensure the Provisioning Profiles directory exists
          mkdir -p "$PROFILE_DIR"
          echo "$APPLE_PROVISIONING_PROFILE" | base64 --decode > "$PROFILE_DIR/profile.mobileprovision"
          # ---- DEBUG: verify decode ----
          PROFILE_PATH="$PROFILE_DIR/profile.mobileprovision"
          BYTES=$(stat -f%z "$PROFILE_PATH")
          echo "Decoded provisioning profile size: ${BYTES} bytes"
          if [ "$BYTES" -eq 0 ]; then
            echo "::error::Decoded provisioning profile is empty â€“ check that japchae.mobileprovision.b64.txt contains valid base64 encoded content" && exit 1
          fi
          echo "Top of decoded profile plist (should start with <?xml ... >):"
          security cms -D -i "$PROFILE_PATH" | head -n 10
          
          # ---- Extract UUID for xcodebuild ----
          echo "DEBUG: About to extract UUID from same file..."
          echo "DEBUG: File still exists: $(ls -la "$PROFILE_PATH")"
          echo "DEBUG: Testing security cms again..."
          security cms -D -i "$PROFILE_PATH" | head -n 3
          echo "DEBUG: Now extracting UUID..."
          # Decode to temp file since PlistBuddy needs a file path, not stdin
          TEMP_PLIST="/tmp/profile.plist"
          security cms -D -i "$PROFILE_PATH" > "$TEMP_PLIST"
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print:UUID" "$TEMP_PLIST")
          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
          echo "Profile UUID: $PROFILE_UUID"

      # Write App Store Connect key (still needed later for fastlane deliver)
      - name: Write ASC API key to disk
        env:
          ASC_API_KEY_P8: ${{ secrets.ASC_API_KEY_P8 }}
          ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
        run: |
          KEY_PATH="$RUNNER_TEMP/asc_key.p8"
          echo "$ASC_API_KEY_P8" > "$KEY_PATH"
          echo "ASC_KEY_PATH=$KEY_PATH" >> $GITHUB_ENV
          echo "ASC_KEY_ID=$ASC_KEY_ID" >> $GITHUB_ENV
          echo "ASC_ISSUER_ID=$ASC_ISSUER_ID" >> $GITHUB_ENV

      # Build and export IPA via xcodebuild
      - name: Archive with xcodebuild (manual signing)
        run: |
          xcodebuild \
            -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath build/Runner.xcarchive \
            DEVELOPMENT_TEAM=$APPLE_TEAM_ID \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            PROVISIONING_PROFILE="$PROFILE_UUID" \
            clean archive

      - name: Create ExportOptions.plist for manual signing
        run: |
          cat > ios/ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>$APPLE_TEAM_ID</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>signingCertificate</key>
            <string>Apple Distribution</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>ai.strawberry.japchae</key>
              <string>$PROFILE_UUID</string>
            </dict>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
            <key>destination</key>
            <string>export</string>
          </dict>
          </plist>
          EOF

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportOptionsPlist ios/ExportOptions.plist \
            -exportPath build/export

      # Debug: show contents of export directory to help diagnose missing IPA
      - name: List exported files
        run: |
          echo "Listing build/export directory:" && ls -R build/export || true

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: japchae-ios-ipa
          path: build/export/**/*.ipa
          if-no-files-found: error

      # ---- Fastlane: upload to TestFlight ----
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'

      - name: Install fastlane
        run: gem install fastlane -N

      - name: Upload to TestFlight via fastlane
        env:
          ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
          ASC_API_KEY_P8: ${{ secrets.ASC_API_KEY_P8 }}
        run: |
          cd ios && fastlane ios upload_testflight # Latest changes applied
